# services/exploit_generator.py
import os
import json
from datetime import datetime

def generate_exploits_from_vulns(vuln_folder="uploads/vulns", output_folder="uploads/exploits", mapping_file="cve_mapping.json"):
    if not os.path.exists(mapping_file):
        print("❌ Fichier cve_mapping.json manquant.")
        return

    with open(mapping_file) as f:
        mapping = json.load(f)

    os.makedirs(output_folder, exist_ok=True)

    for fn in os.listdir(vuln_folder):
        if not fn.endswith(".json"):
            continue

        path = os.path.join(vuln_folder, fn)
        with open(path) as f:
            vd = json.load(f)

        target = vd.get("target", "unknown")
        ip_safe = target.replace(".", "_")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        out_fn = f"vuln_exploits_{ip_safe}_{timestamp}_exploits.json"
        out_path = os.path.join(output_folder, out_fn)

        exploits = []
        for vul in vd.get("vulnerabilities", []):
            for line in vul.get("output", "").splitlines():
                # repérer les CVE dans la sortie
                if "CVE-" in line:
                    for part in line.split():
                        if part.startswith("CVE-"):
                            cve = part.strip().strip(',')
                            if cve in mapping:
                                md = mapping[cve]
                                exploits.append({
                                    "name": cve,
                                    "cve": cve,
                                    "port": vul.get("port"),
                                    "exploit_id": md["exploit_id"],
                                    "payload": md["payload"],
                                    "target": target
                                })

        with open(out_path, "w") as out:
            json.dump({"target": target, "exploits": exploits}, out, indent=2)

        print(f"✅ Generated {out_path}: {len(exploits)} exploit(s)")
